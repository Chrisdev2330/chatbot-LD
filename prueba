# from flask import Flask, jsonify, request
# from google import genai
# from heyoo import WhatsApp
# import os
# import ssl
# import requests

# app = Flask(__name__)

# # ==============================================
# # CONFIGURACI√ìN INICIAL
# # ==============================================

# # Configuraci√≥n de Gemini
# cliente = genai.Client(api_key="AIzaSyAKJHDBN8cXHtFKc0rzX9oGMsOTXvK1BgI")

# # Token de WhatsApp y ID de n√∫mero de tel√©fono
# WHATSAPP_TOKEN = 'EAAOxgq6y2fwBPE7uSprf6b8R9o11T4OaRQVFgEmxFeZA6S797ZBqx4364yZCXhq8jwqArtK9ZCreyO6KZAgcx1R04CcMjjZCKxYhjl4adNBHneTwz6SPj18nBWbhv7u2GanUn0OpdNWdFWQmjHqOdKTJmiadeu3oOudzmfKW9jU7fIK26eeff3BCSklGKyjev5xQZDZD'
# WHATSAPP_NUMBER_ID = '730238483499494'

# # ==============================================
# # BASE DE CONOCIMIENTO
# # ==============================================

# # Preguntas frecuentes mejoradas con palabras clave
# preguntas_frecuentes = {
#     "formas de pago minorista": {
#         "pregunta": "¬øCu√°les son las formas de pagos en la venta por menor?",
#         "respuesta": "- Efectivo billete en nuestro local\n- Transferencia bancaria\n- Tarjetas de cr√©dito y d√©bito a trav√©s de Mercado Pago",
#         "palabras_clave": ["pago", "minorista", "menor", "tarjeta", "mercado pago", "transferencia", "efectivo"]
#     },
#     "forma de pago mayorista": {
#         "pregunta": "¬øCu√°l es la forma de pago en venta por mayor?",
#         "respuesta": "- √önicamente contado efectivo billete en el local\n- Transferencia bancaria",
#         "palabras_clave": ["mayorista", "mayor", "contado", "pago mayorista"]
#     },
#     "direccion y horario": {
#         "pregunta": "¬øEn qu√© direcci√≥n y horario puedo retirar mi pedido?",
#         "respuesta": "üìç Direcci√≥n: Alsina 455, San Miguel de Tucum√°n\n‚è∞ Horario: \n   - Ma√±ana: 09:00 a 13:00\n   - Tarde: 17:00 a 21:00\n\nTambi√©n realizamos env√≠os a todo el pa√≠s a trav√©s de Correo Argentino.",
#         "palabras_clave": ["direcci√≥n", "horario", "retirar", "local", "ubicaci√≥n", "hora", "cu√°ndo", "d√≥nde"]
#     },
#     "envios tucuman": {
#         "pregunta": "¬øRealizan env√≠os dentro de la provincia de Tucum√°n?",
#         "respuesta": "√önicamente si el cliente nos env√≠a el cadete o comisionista con el dinero para abonar la compra.",
#         "palabras_clave": ["env√≠o", "tucum√°n", "provincia", "cadete", "comisionista"]
#     },
#     "tiempo entrega": {
#         "pregunta": "¬øCu√°nto tarda en llegar mi pedido por correo argentino?",
#         "respuesta": "El tiempo estimado de entrega es de 5 a 7 d√≠as h√°biles.",
#         "palabras_clave": ["tarda", "entrega", "correo", "d√≠as", "cu√°ndo llega", "demora", "hora llegada"]
#     },
#     "horario atencion": {
#         "pregunta": "¬øCu√°l es el horario de atenci√≥n?",
#         "respuesta": "Horario de atenci√≥n:\nLunes a S√°bados\n- Ma√±ana: 09:00 a 13:00\n- Tarde: 17:00 a 21:00",
#         "palabras_clave": ["horario", "atenci√≥n", "abierto", "cierran", "hora", "atendiendo"]
#     },
#     "quienes somos": {
#         "pregunta": "¬øQui√©nes son LD Make Up?",
#         "respuesta": """Somos una empresa con experiencia en el mercado desde 2015, fundada por Luciana D√≠az, maquilladora egresada del Teatro Col√≥n y capacitada internacionalmente en Brasil con las √∫ltimas tendencias en Make Up.

# Nuestros clientes nos destacan por:
# - Excelente atenci√≥n y asesoramiento
# - Equipo altamente capacitado
# - Amplia variedad de productos en:
#   ‚Ä¢ Maquillaje
#   ‚Ä¢ Insumos para u√±as
#   ‚Ä¢ Insumos para pesta√±as

# ¬°Todo en un solo lugar!""",
#         "palabras_clave": ["quienes", "somos", "historia", "empresa", "luciana", "d√≠az"]
#     },
#     "productos": {
#         "pregunta": "¬øQu√© productos ofrecen?",
#         "respuesta": "Ofrecemos una amplia variedad de productos:\n- Maquillaje profesional\n- Insumos para u√±as\n- Insumos para pesta√±as\n\n¬°Todo lo que necesitas en un solo lugar!",
#         "palabras_clave": ["productos", "ofrecen", "venden", "maquillaje", "u√±as", "pesta√±as"]
#     },
#     "tienda fisica": {
#         "pregunta": "¬øTienen tienda f√≠sica?",
#         "respuesta": "S√≠, nuestro local est√° ubicado en:\nüìç Alsina 455, San Miguel de Tucum√°n\n‚è∞ Horario:\n- Ma√±ana: 09:00 a 13:00\n- Tarde: 17:00 a 21:00",
#         "palabras_clave": ["tienda", "f√≠sica", "local", "visitar", "presencial"]
#     }
# }

# # ==============================================
# # PLANTILLAS DE MENSAJES
# # ==============================================

# PLANTILLA_BIENVENIDA = """¬°Hola! üíÑ Soy tu asistente virtual de *LD Make Up*.

# Estoy aqu√≠ para ayudarte con:
# - Consultas sobre productos y precios
# - M√©todos de pago y env√≠os
# - Horarios y direcci√≥n de nuestro local
# - Asesoramiento profesional

# *Importante:* Todas las notificaciones sobre el estado de tu pedido llegar√°n a este mismo chat. üì¶üîî

# ¬øEn qu√© puedo ayudarte hoy?"""

# PLANTILLA_DESPEDIDA = """¬°Gracias por contactar a LD Make Up! üíñ

# Recuerda que estamos en:
# üìç Alsina 455, San Miguel de Tucum√°n
# ‚è∞ Lunes a S√°bados: 09:00-13:00 y 17:00-21:00

# Para cualquier otra consulta, ¬°no dudes en escribirnos!

# ¬°Que tengas un d√≠a hermoso! ‚ú®"""

# MENSAJE_NOTIFICACIONES = """‚ÑπÔ∏è *Recordatorio importante:*
# Todas las notificaciones sobre el estado de tu pedido (confirmaci√≥n, env√≠o, etc.) llegar√°n a este mismo chat. No es necesario que respondas a estos mensajes autom√°ticos. üì¶üîî"""

# MENSAJE_FUERA_CONTEXTO = """üîç *Parece que tu consulta no est√° relacionada con LD Make Up*

# Te invito a preguntarme sobre:
# ‚Ä¢ Maquillaje profesional üíÑ
# ‚Ä¢ Insumos para u√±as/pesta√±as üíÖ
# ‚Ä¢ M√©todos de pago y env√≠os üöö
# ‚Ä¢ Horarios de atenci√≥n üïò
# ‚Ä¢ Direcci√≥n de nuestro local üìç

# Si necesitas otro tipo de asistencia, cont√°ctanos directamente:
# üìû +54 9 3813 02-1066"""

# MENSAJE_CONTACTO_HUMANO = """üë©‚Äçüíº *Asistencia Humana*
# Parece que no he podido resolver tu consulta satisfactoriamente. 

# Por favor, contacta a nuestro equipo de atenci√≥n al cliente:
# üìû Tel√©fono: +54 9 3813 02-1066
# ‚è∞ Horario: Lunes a S√°bados 9-13hs y 17-21hs

# ¬°Estaremos encantados de ayudarte!"""

# # ==============================================
# # FLUJOS CONVERSACIONALES
# # ==============================================

# FLUJO_CONVERSACION = {
#     "agradecimiento": ["gracias", "muchas gracias", "thanks", "thank you", "agradecido", "agradecida"],
#     "despedida": ["adi√≥s", "chao", "bye", "hasta luego", "nos vemos", "hasta pronto"],
#     "notificaciones": ["notificaciones", "estado de pedido", "seguimiento", "tracking", "donde est√°", "cuando llega"],
#     "contacto_humano": ["humano", "persona", "asesor", "representante", "operador", "hablar con alguien"]
# }

# # ==============================================
# # MANEJO DE ESTADOS Y CONTEXTO
# # ==============================================

# estados_chats = {}

# def actualizar_estado(telefono, clave, valor):
#     """Actualiza el estado de la conversaci√≥n para un n√∫mero de tel√©fono espec√≠fico"""
#     if telefono not in estados_chats:
#         estados_chats[telefono] = {}
#     estados_chats[telefono][clave] = valor

# def obtener_estado(telefono, clave, default=None):
#     """Obtiene el estado actual de la conversaci√≥n"""
#     return estados_chats.get(telefono, {}).get(clave, default)

# # ==============================================
# # FUNCIONES DE B√öSQUEDA INTELIGENTE
# # ==============================================

# def buscar_en_preguntas_frecuentes(mensaje):
#     """
#     Busca coincidencias inteligentes en las preguntas frecuentes
#     Devuelve (encontrado, respuesta) donde encontrado es True/False
#     """
#     mensaje = mensaje.lower()
    
#     # Primero buscamos coincidencia exacta
#     for faq in preguntas_frecuentes.values():
#         if faq["pregunta"].lower() in mensaje:
#             return True, faq["respuesta"]
    
#     # Luego buscamos por palabras clave
#     coincidencias = []
#     for faq in preguntas_frecuentes.values():
#         for palabra in faq["palabras_clave"]:
#             if palabra.lower() in mensaje:
#                 coincidencias.append(faq)
#                 break
    
#     # Si hay exactamente una coincidencia, la devolvemos
#     if len(coincidencias) == 1:
#         return True, coincidencias[0]["respuesta"]
    
#     # Si hay m√∫ltiples coincidencias, pedimos especificar
#     elif len(coincidencias) > 1:
#         opciones = "\n".join([f"‚Ä¢ {faq['pregunta']}" for faq in coincidencias])
#         mensaje = f"üîç Tengo varias opciones relacionadas con tu consulta:\n\n{opciones}\n\nPor favor, especifica cu√°l de estas preguntas es la que necesitas responder."
#         return True, mensaje
    
#     # Si no hay coincidencias
#     return False, None

# # ==============================================
# # FUNCIONES DE RESPUESTA
# # ==============================================

# def enviar(telefono, mensaje):
#     """Env√≠a un mensaje a trav√©s de WhatsApp"""
#     mensajeWa = WhatsApp(WHATSAPP_TOKEN, WHATSAPP_NUMBER_ID)
#     mensajeWa.send_message(mensaje, telefono)

# def manejar_respuesta_gemini(telefono, mensaje):
#     """
#     Maneja la respuesta de Gemini con l√≥gica de reintentos y contacto humano
#     """
#     intentos = obtener_estado(telefono, "intentos_fuera_contexto", 0)
    
#     try:
#         respuesta = cliente.models.generate_content(
#             model="gemini-2.0-flash",
#             contents=f"""
#             Eres un asistente de LD Make Up. Responde profesionalmente sobre:
#             - Maquillaje y productos de belleza
#             - Direcci√≥n: Alsina 455, San Miguel de Tucum√°n
#             - Horarios: Lunes a S√°bados 9-13hs y 17-21hs
#             - Pagos: Efectivo/Transferencia/Tarjetas
#             - Env√≠os por Correo Argentino

#             Usa este contexto para responder:
#             {preguntas_frecuentes}

#             Si la pregunta NO es sobre estos temas, responde EXACTAMENTE:
#             "FUERA_DE_CONTEXTO"

#             Pregunta: {mensaje}
#             """
#         )
        
#         if "FUERA_DE_CONTEXTO" in respuesta.text:
#             intentos += 1
#             actualizar_estado(telefono, "intentos_fuera_contexto", intentos)
            
#             if intentos >= 3:
#                 enviar(telefono, MENSAJE_CONTACTO_HUMANO)
#                 actualizar_estado(telefono, "intentos_fuera_contexto", 0)
#             else:
#                 enviar(telefono, MENSAJE_FUERA_CONTEXTO)
#         else:
#             actualizar_estado(telefono, "intentos_fuera_contexto", 0)
#             enviar(telefono, respuesta.text)
            
#     except Exception as e:
#         enviar(telefono, "‚ö†Ô∏è Hubo un error procesando tu solicitud. Por favor int√©ntalo nuevamente o cont√°ctanos al +54 9 3813 02-1066")

# # ==============================================
# # ENDPOINT PRINCIPAL
# # ==============================================

# @app.route("/webhook/", methods=["POST", "GET"])
# def webhook_whatsapp():
#     if request.method == "GET":
#         if request.args.get('hub.verify_token') == "HolaNovato":
#             return request.args.get('hub.challenge')
#         return "Error de autentificaci√≥n."

#     data = request.get_json()
    
#     try:
#         if 'messages' not in data['entry'][0]['changes'][0]['value']:
#             return jsonify({"status": "success"}, 200)
#     except:
#         return jsonify({"status": "error"}, 400)

#     telefonoCliente = data['entry'][0]['changes'][0]['value']['messages'][0]['from']
#     mensaje = data['entry'][0]['changes'][0]['value']['messages'][0]['text']['body'].lower()

#     # ==============================================
#     # MANEJO DE FLUJOS CONVERSACIONALES B√ÅSICOS
#     # ==============================================
    
#     # Saludos iniciales
#     if any(palabra in mensaje for palabra in ["hola", "hi", "hello", "buenos d√≠as", "buenas tardes", "buenas"]):
#         enviar(telefonoCliente, PLANTILLA_BIENVENIDA)
#         return jsonify({"status": "success"}, 200)
    
#     # Agradecimientos
#     if any(palabra in mensaje for palabra in FLUJO_CONVERSACION["agradecimiento"]):
#         enviar(telefonoCliente, "¬°Con gusto! ¬øEn qu√© m√°s puedo ayudarte? üòä")
#         return jsonify({"status": "success"}, 200)
    
#     # Despedidas
#     if any(palabra in mensaje for palabra in FLUJO_CONVERSACION["despedida"]):
#         enviar(telefonoCliente, PLANTILLA_DESPEDIDA)
#         return jsonify({"status": "success"}, 200)
    
#     # Notificaciones
#     if any(palabra in mensaje for palabra in FLUJO_CONVERSACION["notificaciones"]):
#         enviar(telefonoCliente, MENSAJE_NOTIFICACIONES)
#         return jsonify({"status": "success"}, 200)
    
#     # Solicitud de contacto humano (manejado por l√≥gica de reintentos)
#     if any(palabra in mensaje for palabra in FLUJO_CONVERSACION["contacto_humano"]):
#         intentos = obtener_estado(telefonoCliente, "intentos_fuera_contexto", 0)
#         if intentos >= 2:
#             enviar(telefonoCliente, MENSAJE_CONTACTO_HUMANO)
#             actualizar_estado(telefonoCliente, "intentos_fuera_contexto", 0)
#         else:
#             enviar(telefonoCliente, "Por favor, ind√≠came exactamente en qu√© necesitas ayuda para poder asistirte mejor. Si no logro resolver tu consulta, te proporcionar√© nuestro contacto.")
#         return jsonify({"status": "success"}, 200)

#     # ==============================================
#     # B√öSQUEDA INTELIGENTE DE RESPUESTAS
#     # ==============================================
    
#     # Buscar en preguntas frecuentes con coincidencias inteligentes
#     encontrado, respuesta_faq = buscar_en_preguntas_frecuentes(mensaje)
    
#     if encontrado:
#         enviar(telefonoCliente, respuesta_faq)
#     else:
#         # Consultar a Gemini para preguntas m√°s complejas
#         manejar_respuesta_gemini(telefonoCliente, mensaje)

#     return jsonify({"status": "success"}, 200)

# # ==============================================
# # INICIO DE LA APLICACI√ìN
# # ==============================================

# if __name__ == "__main__":
#     app.run(host='0.0.0.0', debug=False)